#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('UI-mar_v10:server');
var http = require('http');
var async=require('async');
var sys = require('sys');
var exec = require('child_process').exec;
var mysql=require('mysql');
var fs=require('fs');
//var socket_server=require('../socket_server');

var clients =[];
var i=0;
var PPPLinkData={};

//pppObject makes this version commmon.Change it if needed
var pppObject={'ppp0':'e1','ppp2':'w1','ppp4':'l1'};
var pppNum=3;

var SysStatusData={'ifDyn':true,'ifSchedule':true,'ifTunnel':true};
for(var item in pppObject){
  SysStatusData['if'+item.toUpperCase()]=true;
  PPPLinkData[item]={};
}

var rootPercent=0;
var bootPercent=0;

//连接数据库
var database_dyninfo = 'dyninfo';
var database_monitor='monitor';
var table_init_dyna="init_dyna";
var table_schedule_data = 'schedule_data';
var table_service_qos='service_qos';
var table_traffic_port='traffic_port';
//创建mysql连接
var client = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'bjtungirc'
});

client.connect();
//无论用户是否连接都检查monitor更新
(function(){
  for(var item in pppObject){
    client.query('use '+database_dyninfo);
    var SQL="select * from  "+item+"_link order by id desc limit 1";
    client.query(SQL,function(error,result){
      if(error) {
        console.log(error);
      }
      else{
       // var k=parseInt(result[0]['ifname'].substr(-1));
       // MonitorData[item]={'ifUpdated':false,'id':parseInt(result[0]['id']),'time':result[0]['time'],'ratesend':parseInt(result[0]['ratesend']),
        //  'raterecv':parseInt(result[0]['raterecv']),'RSRP':parseInt(result[0]['RSRP']),'rtt':parseInt(result[0]['realrtt']),'lossrate':parseInt(result[0]['lossrate'])};
	if(result.length>0){
        PPPLinkData[item]=result[0];
        PPPLinkData[item]['ifUpdated']=false;
	}
      }
    });
	//console.log(item);
  }
})();

monitorUpdate();
statusCheck();
diskPercentCheck();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8081');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//更新收发速率
function monitorUpdate(){
  for(var ppp in pppObject){
    //console.log(ppp);//there is a bug here
	client.query('use '+database_dyninfo);
    var SQL="select * from "+ppp+"_link order by id desc limit 1";
    client.query(SQL,function(error,result){
      if(error) {
        console.log(error);
      }
      else{
	if(result.length>0){
		var ppp=result[0]['ifname'];
	//	console.log(PPPLinkData[ppp]['id']);
        if(parseInt(result[0]['id'])!=PPPLinkData[ppp]['id']){
          PPPLinkData[ppp]=result[0];
          PPPLinkData[ppp]['ifUpdated']=true;
        }else{
          PPPLinkData[ppp]['ifUpdated']=false;

        }
	}
      }
    });
	//console.log(ppp);
  }
  setTimeout(function(){
    monitorUpdate();
  },3000);

}

//检查系统状态
function statusCheck(){
  var syscommond='';
  async.series([
    //daemon_
    function(callback){
      syscommand='ps aux|grep daemon_dynamicroute1.7';
      exec(syscommand,function(err,stdout,stderror){
        var x=stdout.split('\n');
        //console.log(x);
        if(x.length>3){
          SysStatusData.ifDyn=true;
        }else{
          SysStatusData.ifDyn=false;
        }
        callback(null,stdout);
      });

    },
    function(callback){
      syscommand='ps aux|grep daemon_scheduler';
      exec(syscommand,function(err,stdout,stderror){
        var x=stdout.split('\n');

        if(x.length>3){
          SysStatusData.ifSchedule=true;
        }else{
          SysStatusData.ifSchedule=false;
        }
        callback(null,stdout);
      });

    },
    function(callback){
      syscommand='ps aux|grep NetMonitor';
      exec(syscommand,function(err,stdout,stderror){
        var x=stdout.split('\n');
        if(x.length>3){
          SysStatusData.ifTunnel=true;
        }else{
          SysStatusData.ifTunnel=false;
        }
        callback(null,stdout);
      });

    },
    function(callback){
      for (var item in pppObject )
      {
        SysStatusData['if'+item.toUpperCase()]=false;
      }
      syscommand =  'ifconfig |grep "ppp" |awk \'{print $1}\'';//获取当前可用ppp链路
      exec(syscommand,function (err,stdout,stderr) {
        var error ='';
        if (err !== null) {
          console.log('exec error:' + err);
        }
        else{
          //console.log('stdout：',stdout);
          var ppp = [];
          ppp = stdout.split('\n');
          for (var i=0;i<ppp.length-1 ;i++ )
          {
            var k=parseInt(ppp[i].substr(-1));
            SysStatusData['ifPPP'+k]=true;
          }
          //console.log('stderr：',stderr);
        }
        callback(error,stdout);
      });
    },
    //获得cpu占用率
    function(callback){
      syscommand='top -b -n 1 |awk "NR==3"';
      exec(syscommand,function(err,stdout,stderror){
        if(err){
          console.log(err);
        }else{
          var x=stdout.split('%id');

          SysStatusData.cpuPercent=100-parseInt(x[0].substr(-5));
        }
        callback(null,stdout);
      });

    },
    //获得memory使用率
    function(callback){
      syscommand='top -b -n 1 |awk "NR==4"';
      exec(syscommand,function(err,stdout,stderror){
        if(err){
          console.log(err);
        }else{
          var x=stdout.split('k total');
          var total=parseInt(x[0].substr(-8));
          var y=stdout.split('k used')
          var used=parseInt(y[0].substr(-8));
          SysStatusData['memoryPercent']=Math.round(used*100/total);
        }
        callback(null,stdout);
      });

    }


  ],function(error,stdout){
    if(error){
      console.log(error);

    }else{
      //console.log(SysStatusData);

    }
  });
  setTimeout(function(){
    //console.log(SysStatusData);
    statusCheck();
  },5000);
}
//检查磁盘使用率
function diskPercentCheck(){
  var syscommand="df -h |awk '{print $5}'";
  exec(syscommand,function(err,stdout,stderror){
    if(err){
      console.log(err);
    }else{
      var z=stdout.split('\n');
      rootPercent=parseInt(z[1]);
      bootPercent=parseInt(z[6]);
    }
  });
  setTimeout(function(){
    diskPercentCheck();
  },300000);
}

/****************************************************socket事件********************************************************/
io.on('connection', function (socket) {
  console.log('与UI建立好连接');
  //socket_server(socket);


  //监听客户端自定义的storeClientInfo事件，记录客户端id
  socket.on('storeClientInfo', function (data) {
    var clientInfo = new Object();
    clientInfo.customId     = data.customId;
    //新增了一个DevID
    clientInfo.DevID     = data.DevID;
    clientInfo.clientId     = socket.id;
    console.log(clientInfo);
    clients.push(clientInfo);

    console.log('管理员建立连接');
  });


  //如果当websocket客户端断开连接时，会从用户ID列表里，删除该用户id
  socket.on('disconnect', function (data) {
    for( var i=0, len=clients.length; i<len; ++i ){
      var c = clients[i];
      if(c.clientId == socket.id){
        clients.splice(i,1);
        console.log('客户端断开连接');
        console.log(c);
        break;
      }
    }
  });



  //开启动态监测
  socket.on('open_dyn',function(){
    exec("daemon_dynamicroute1.7",function (err,stdout,stderr) {
      console.log('stdout：',stdout);
      console.log('stderr：',stderr);
      if (err !== null) {
        console.log('Open dyn failed!');
        console.log('exec error:' + err);
      }
      else{
        console.log('Open dyn successfully!');
        socket.emit('open_dyn_success');
      }
    });
  });

  //开启数据调度
  socket.on('open_schedule',function(){
    exec("daemon_scheduler",function (err,stdout,stderr) {
      console.log('stdout：',stdout);
      console.log('err',stderr);
      if (err !== null) {
        console.log('Open scheduler failed!');
        console.log('exec error:' + err);
      }
      else{
        console.log('Open scheduler successfully!');
        socket.emit('open_schedule_success');
      }
    });
  });

  //开启隧道
  socket.on('open_tunnel',function(data){

    async.series([ //使用async,保证程序顺序执行

          function(callback) {  //通过ping 10.0.0.1 监测隧道是否开启
            console.log('open tunnel');
            var ping = "ping 10.0.0.1 -w 5|grep ttl";

            exec(ping,function (error,stdout,stderr) {
              console.log('stdout：',stdout);
              console.log('stderr：',stderr);
              /*if (error !== null) {
               　　console.log('exec error:' + error);
               　　}*/
              callback(error,stdout);
            });
          },

        ],
        function(error,stdout) {
          if(error) {
            console.log('error:',error);
            var open_tun = "/usr/local/bin/NetMonitor&";

            exec(open_tun,function (err,stdout,stderr) {
              console.log('stdout：',stdout);
              console.log('stderr：',stderr);
              if (err !== null) {
                console.log('Open tunnel failed!');
                console.log('exec error:' + err);
              }
              else{
                console.log('Open tunnel successfully!');
                socket.emit('open_tunnel_success');
              }
            });

          }
          else {
            console.log('Tunnel has been opened before！');
          }

        }
    );

  });

  //返回系统状态
  socket.on('reqSysStatus',function(){
    //console.log(SysStatusData);
    socket.emit('getSysStatus',SysStatusData);
  });
  //返回磁盘使用率
  socket.on('reqDiskStatus',function(){
    var data={};
    data['rootPercent']=rootPercent;
    data['bootPercent']=bootPercent;
    //console.log(data);
    socket.emit('getDiskStatus',data);
  });

  //PPP状态更改触发事件
  socket.on('pppStatusChange',function(data){
    var state=data['state'];
    var num=data['ppp'];
    var commond='';
    if (state)
    {
        commond='daemon_'+pppObject['ppp'+num];
    }
    else
    {
      commond='kill'+pppObject['ppp'+num]+'.sh';
    }
    if(commond.length>0){
      console.log(commond);
      exec(commond,function(err,stdout,stderr){
        if(err){
          console.log(err);
        }else{
          socket.emit('ppp_change_success');
        }
      });
    }


  });


  //重启
  socket.on('reboot_event',function(data){
    console.log('System will reboot!');
    setTimeout(function(){
      exec('reboot',function (error,stdout,stderr) {
        console.log('stdout：',stdout);
        console.log('stderr：',stderr);
      });
    },1000);

  });

  //关机
  socket.on('shutdown_event',function(data){
    console.log('System will shutdown!');
    setTimeout(function(){
      exec('init 0',function (error,stdout,stderr) {
        console.log('stdout：',stdout);
        console.log('stderr：',stderr);
      });
    },1000);

  });



  //返回收发速率
  socket.on('reqMonitor',function(){
    /*for(var item in MonitorData){
     console.log(MonitorData[item]);
     }*/
    socket.emit('getMonitor',PPPLinkData);

  });

  //返回schedule_data表格
  socket.on('reqScheduleData',function(){
    client.query('use '+database_dyninfo);
    var SQL="select link_section,MAX_PKTLOSSRATE,MAX_RTT,MIN_RSSI,MIN_RSRP,MIN_RSRQ,MIN_SINR,MIN_SNR,SLA,manual_sendpercent,sendpercent from  "+table_schedule_data;
    client.query(SQL,function(error,result){
      if(error) {
        console.log(error);
      }
      else{
        //console.log(result);
        socket.emit("getScheduleData",result[0])
      }
    });
  });

  //更新schedule_data表格
  socket.on("schedule_data_update",function(data){
    client.query('use '+database_dyninfo);
    if(typeof(data['value'])=='string'){
      var SQL="update "+table_schedule_data+" set "+data['key']+"='"+data['value']+"'";
    }else{
      var SQL="update "+table_schedule_data+" set "+data['key']+"="+data['value'];
    }
    client.query(SQL,function(error,result){
      if(error) {
        console.log("change "+data['key']+" fail");
        console.log(error);
      }
      else{
        if(data['key']=='link_section'){
          exec('pkill scheduler',function(err,stdout,stderr){
            if(err) console.log(err);
          });
        }
        console.log("change "+data['key']+" success");
        socket.emit("schedule_data_update_success",data);
      }
    });
  });


  //返回init_dyna数据
  socket.on("reqInitDyna",function(data){
    client.query('use '+database_dyninfo);
    var SQL="select * from  "+table_init_dyna;
    client.query(SQL,function(error,result){
      if(error) {
        console.log(error);
      }
      else{
        //console.log(result);
        socket.emit("getInitDyna",result[0]);
      }
    });
  });

  //更新init_dyna表格
  socket.on("init_dyna_update",function(data){


    client.query('use '+database_dyninfo);
    var SQL="UPDATE "+table_init_dyna+" set mode="+data['mode']+",remotehost='"+data['remotehost']+"'";
    client.query(SQL,function(error,result){
      if(error) {
        console.log("change  fail");
        console.log(error);
      }
      else{
        console.log("change success");
        if(data['mode']==0){
          var commond=switch_mode_path+"mer2dir.sh";
          exec(commond,function(err,stdout,stderr){
            if(err){
              console.log(err);
            }else{
              socket.emit("init_dyna_update_success",data);
            }
          });
        }else if(data['mode']==1){
          var commond=switch_mode_path+"dir2mer.sh";
          exec(commond,function(err,stdout,stderr){
            if(err){
              console.log(err);
            }else{
              socket.emit("init_dyna_update_success",data);
            }
          });
        }

      }
    });




  });

  //初始化ppp_link返回数据
  socket.on('ppp_link_init',function(){
    var table_init={};
    var count=0;
    client.query('use '+database_dyninfo);

    for(var item in pppObject){
      var SQL="select * from "+item+"_link order by id desc limit 5";
      client.query(SQL,function(error,result){
        if(error) {
          console.log(error);
        }
        else{
	if(result.length>0){
		 var ppp=result[0]['ifname'];
          table_init[ppp]=result;
          count++;
			//console.log(ppp,':',table_init[ppp][0]['ifname']);
         //console.log(pppObject.length-1); 
		 if(count>pppNum-1){
           //console.log(table_init['ppp0'][0]['ifname']);
			//console.log(table_init['ppp5'][0]['ifname']);
            socket.emit('getTableLinkInit',table_init);
          }
	}	
        }
      });
    }

  });

  //更新 ppp_link
  socket.on('ppp_link_update',function(){
    socket.emit('PPPLinkUpdate',PPPLinkData);
  });

  //merip地址更改
  socket.on('merip_change',function(mer_ip){
    var syscommond="";
    async.series([
      function(callback){
        syscommand="sed -i '5c merip="+mer_ip+"' /etc/mar_tun.conf";
        exec(syscommand,function(err,stdout,stderror){
          if(err) console.log(err);
          callback(null,stdout);
        });

      },
      function(callback){
        syscommand="sed -i '5c merip="+mer_ip+";' /home/schedule.conf";
        exec(syscommand,function(err,stdout,stderror){
          if(err) console.log(err);
          callback(null,stdout);
        });

      }
    ],function(error,stdout){
      if(error){
        console.log(error);

      }else{
        socket.emit('merip_change_success');

      }
    });

  });

    //wifi请求
  socket.on('reqWifi',function(){
    fs.readFile('/home/wlan0.conf','utf-8',function(err,data){
      if(err){
        console.log(err);
      }
      else{
        var array_temp=data.split('\n');
        var wifi={};
        for(var item in array_temp){
          var item0=array_temp[item];
          if(item0.substr(0,4)=='ssid'){
            wifi.wifi_ssid=item0.substr(5);
          }
          if(item0.substr(0,14)=='wpa_passphrase'){
            wifi.wifi_code=item0.substr(15);
          }
          ;
        }
	//console.log(wifi.wifi_ssid,wifi.wifi_code);
	socket.emit('getWifi',wifi);
      }
    })

  })
  //wifi配置
  socket.on('wifi_change',function(data){
    exec("/home/wifi_ap.sh "+data.ssid+" "+data.code,function(err,stdout,stderr){
      if(err) console.log(err);
      else socket.emit("wifi_ap_success");
    })
  });




});
